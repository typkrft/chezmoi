#!/usr/bin/env bash

# set -ex

set_kmonad ()
{
  sudo killall kmonad &>/dev/null 
  CTRL=$(ioreg -p IOUSB | grep -o CTRL)
  if [[ $CTRL = "CTRL" ]]; then 
    sudo $HOME/.config/bin/kmonad $HOME/.config/kmonad/ctrl.kbd &>/dev/null &
  else
    sudo $HOME/.config/bin/kmonad $HOME/.config/kmonad/m1.kbd &>/dev/null &
  fi
} 

toggle_layout ()
{
  LAYOUT=$(yabai -m query --spaces --space | jq .type)
 
  if [[ $LAYOUT =~ "bsp" ]]; then 
    yabai -m space --layout stack 
  elif [[ $LAYOUT =~ "stack" ]]; then 
    yabai -m space --layout float 
  elif [[ $LAYOUT =~ "float" ]]; then 
    yabai -m space --layout bsp 
  fi
}

opacity_up ()
{
  OPACITY=$(yabai -m query --windows --window | jq .opacity)
  if [[ $OPACITY -eq 1.0 ]]; then
    yabai -m window --opacity 0.1
  else
    OPACITY=$(echo $OPACITY + 0.1 | bc)
    yabai -m window --opacity $OPACITY
  fi
}

opacity_down ()
{
  OPACITY=$(yabai -m query --windows --window | jq .opacity)
  if [[ $OPACITY -eq 0.1 ]]; then
    yabai -m window --opacity 1.0
  else
    OPACITY=$(echo $OPACITY - 0.1 | bc)
    yabai -m window --opacity $OPACITY
  fi
}

close_window () 
{
  FULLSCREEN=$(yabai -m query --windows --window | jq '."is-native-fullscreen"')
  APP=$(yabai -m query --windows --window | jq -r '."app"')
  skhd -k "escape"; 
  if [[ $FULLSCREEN = "true" ]]; then
    # osascript -l JavaScript -e 'Application("System Events").keystroke("w",{using: ["command down", "shift down"]})'
    
    if [[ $APP = "Firefox" ]]; then
      hs -A -c "closeWindow()"
    fi
  else
    skhd -k "shift + cmd - w"
    # yabai -m window --close
  fi
}

toggle_border ()
{
  BORDER=$(yabai -m config window_border)
  if [[ $BORDER = "on" ]]; then
    yabai -m config window_border off
  elif [[ $BORDER = "off" ]]; then
    yabai -m config window_border on
  fi
  yabai -m config window_border
}

increase_gaps ()
{
  GAP=$(yabai -m config window_gap)
  yabai -m config window_gap $(echo $GAP + 1| bc)
}

decrease_gaps ()
{
  GAP=$(yabai -m config window_gap)
  yabai -m config window_gap $(echo $GAP - 1| bc)
}

increase_padding_top ()
{
  PADDING=$(yabai -m config top_padding)
  yabai -m config top_padding $(echo $PADDING + 1| bc)
}

increase_padding_bottom ()
{
  PADDING=$(yabai -m config bottom_padding)
  yabai -m config bottom_padding $(echo $PADDING + 1| bc)
}

increase_padding_left ()
{
  PADDING=$(yabai -m config left_padding)
  yabai -m config left_padding $(echo $PADDING + 1| bc)
}

increase_padding_right ()
{
  PADDING=$(yabai -m config right_padding)
  yabai -m config right_padding $(echo $PADDING + 1| bc)
}

increase_padding_all ()
{
  PADDING_TOP=$(yabai -m config top_padding)
  PADDING_BOTTOM=$(yabai -m config bottom_padding)
  PADDING_LEFT=$(yabai -m config left_padding)
  PADDING_RIGHT=$(yabai -m config right_padding)
  WINDOW_GAP=$(yabai -m config window_gap)

  yabai -m config top_padding $(echo $PADDING_TOP + 10| bc)
  yabai -m config bottom_padding $(echo $PADDING_BOTTOM + 10| bc)
  yabai -m config left_padding $(echo $PADDING_LEFT + 10| bc)
  yabai -m config right_padding $(echo $PADDING_RIGHT + 10| bc)
  yabai -m config window_gap $(echo $WINDOW_GAP + 10| bc)
}

decrease_padding_top ()
{
  PADDING=$(yabai -m config top_padding)
  yabai -m config top_padding $(echo $PADDING - 1| bc)
}

decrease_padding_bottom ()
{
  PADDING=$(yabai -m config bottom_padding)
  yabai -m config bottom_padding $(echo $PADDING - 1| bc)
}

decrease_padding_left ()
{
  PADDING=$(yabai -m config left_padding)
  yabai -m config left_padding $(echo $PADDING - 1| bc)
}

decrease_padding_right ()
{
  PADDING=$(yabai -m config right_padding)
  yabai -m config right_padding $(echo $PADDING - 1| bc)
}

decrease_padding_all ()
{
  PADDING_TOP=$(yabai -m config top_padding)
  PADDING_BOTTOM=$(yabai -m config bottom_padding)
  PADDING_LEFT=$(yabai -m config left_padding)
  PADDING_RIGHT=$(yabai -m config right_padding)
  WINDOW_GAP=$(yabai -m config window_gap)

  yabai -m config top_padding $(echo $PADDING_TOP - 10| bc)
  yabai -m config bottom_padding $(echo $PADDING_BOTTOM - 10| bc)
  yabai -m config left_padding $(echo $PADDING_LEFT - 10| bc)
  yabai -m config right_padding $(echo $PADDING_RIGHT - 10| bc)
  yabai -m config window_gap $(echo $WINDOW_GAP - 10| bc)
}

new_window ()
{
  APP_TO_OPEN="$1"
  CURRENT_APP=$(yabai -m query --windows --window | jq -r '.app')
  
  click_menu_bar ()
  {
    osascript -e 'tell application "System Events"' \
      -e "tell application process \"$APP_TO_OPEN\"" \
      -e "tell menu 1 of menu bar item 3 of menu bar 1" \
      -e "click (first menu item whose value of attribute \"AXMenuItemCmdChar\" is \"N\" and value of attribute \"AXMenuItemCmdModifiers\" is $1)" \
      -e 'end tell' \
      -e 'end tell' \
      -e 'end tell'
  }


  RUNNING=$(osascript -e "tell application \"System Events\" to set Appli_Launch to exists (processes where name is \"$APP_TO_OPEN\")")
  
  if ! [[ $RUNNING = true ]]; then
    if [[ $APP_TO_OPEN = "kitty" ]]; then
      open -a kitty.app --args -1 
    fi
    osascript -e "tell application \"$APP_TO_OPEN\" to launch"
    exit 0
  fi

  osascript -e "tell application \"$APP_TO_OPEN\" to activate"

  if [[ $2 = "stack" ]]; then
    yabai -m window --insert stack
  fi

  if [[ $APP_TO_OPEN = "Code" ]]; then
    click_menu_bar 1
  elif [[ $APP_TO_OPEN = "Firefox" ]]; then
    # HACK: Yabai fails to allow firefox window to open running from command line works though
    /Applications/Firefox.app/Contents/MacOS/firefox-bin --new-window
  else
    click_menu_bar 0
  fi
}

create_spaces () {
  CURRENT_SPACES=$(yabai -m query --spaces | jq -r '[.[]."is-native-fullscreen"| select(.==false) ]| length')
  NEEDED_SPACES=$1

  if [[ $CURRENT_SPACES -ge $NEEDED_SPACES ]]; then 
    return
  fi
  SPACES_TO_CREATE=$(($NEEDED_SPACES - $CURRENT_SPACES))
  
  for i in $(seq $((1 + CURRENT_SPACES)) $NEEDED_SPACES); do 
    echo $i 
    yabai -m space --create
    yabai -m space --focus $i && wallpaper set "$HOME/.config/wallpapers/$(\ls ~/.config/wallpapers | shuf -n 1)"
  done
}

set_wallpaper () {
  #path=("$HOME/.config/bin" $path)
  #export path
  # TODO: Add flag to set all spaces to same wallpaper
  # TODO: Set the name of the terminal and center and float it in yabai rules
  # TODO: Bind key to set color scheme
  # TODO: Bind key to show desktop
  /opt/homebrew/bin/skhd -k 'escape'

  RUNNING=$(/usr/bin/osascript -e 'tell application "System Events" to set Appli_Launch to exists (processes where name is "kitty")')
  TOTAL_SPACES=$(/opt/homebrew/bin/yabai -m query --spaces | jq '.[].id' | wc -l | xargs)
  CURRENT_SPACE=$(/opt/homebrew/bin/yabai -m query --spaces --space | jq -r ."index")
  
  if [[ $CURRENT_SPACE -ne 1 ]]; then /opt/homebrew/bin/yabai -m space --focus 1; fi
  
  /opt/homebrew/bin/yabai -m space --toggle show-desktop

  /Applications/kitty.app/Contents/MacOS/kitty -1 --title=Wallpaper /bin/sh -c "/bin/ls $1 | /opt/homebrew/bin/fzf --multi $TOTAL_SPACES --reverse --height 100% --bind 'ctrl-w:execute-silent:(/opt/homebrew/bin/wallpaper set $1{})' --preview '/opt/homebrew/bin/timg -g 80x40 --auto-crop $1{}' | /usr/bin/xargs -I {} /bin/sh -c '/opt/homebrew/bin/wallpaper set $1{}; /opt/homebrew/bin/yabai -m space --focus next; /opt/homebrew/bin/yabai -m space --focus $CURRENT_SPACE; /opt/homebrew/bin/yabai -m space --toggle show-desktop';   /opt/homebrew/bin/skhd -k 'cmd-q'"
}

get_pixel_color () {

  # Use hammer spoon to get mouse x,y coords
  X=$(hs -A -c "hs.mouse.absolutePosition()['x']") 
  Y=$(hs -A -c "hs.mouse.absolutePosition()['y']")

  # Screenshot pixel at mouse coords save to $TMPDIR
  # HEX Dump and grab color 
  # NOTE: This will require security and privacy permissions to capture the screen
    # Running against known hexs will not reproduce the same hex though will
    # produce the same color for all intents and purposes. Generally a single 
    # Color R G or B will be 1 digit less than the actual.

  COLOR=$(
    screencapture -R $X,$Y,1,1 -t bmp $TMPDIR/pixel_color.bmp
    xxd -p -l 3 -s 54 $TMPDIR/pixel_color.bmp | 
    sed 's/\(..\)\(..\)\(..\)/\3\2\1/'
  )
  
  # Copy Color to Clipboard
  echo "#$COLOR" | pbcopy

  # Use applescript to display a native OS notification 
  # TODO: This could be improved with imagemagick and hammerspoon 
  /usr/bin/osascript -e '
    on run argv
      display notification "#" & item 1 of argv
    end run
  ' $COLOR

  /opt/homebrew/bin/skhd -k 'escape'

}

 # New iTerm Window 
 new_iterm() {
  yabai -m window --focus first
  osascript -e '
    tell application "iTerm"
      set newWindow to (create window with profile "Default")
    end tell
  '
  yabai -m window --focus last
}

cycle_windows() {
  reverse=""
  if [[ $1 != "--reverse" ]]; then
    reverse="| reverse"
  else
    reverse=""
  fi
  yabai -m query --windows --space | jq -re '
    map(select((."is-minimized" != true) and ."can-move" == true))
    | sort_by(.frame.x, .frame.y, ."stack-index", .id)
    '"$reverse"'
    | first as $first
    | map( $first.id, .id )
    | .[]' | \
  tail -n +3 | \
  xargs -n2 sh -c 'echo $1 $2; yabai -m window $1 --swap $2' sh
}

float_reset () {
  ids=($(yabai -m query --windows --space | jq -re '.[].id'))

  for window in $ids; do
      top=$(yabai -m query --windows --window $window | jq -re '."is-topmost"')
      floating=$(yabai -m query --windows --window $window | jq -re '."is-floating"')

      if $top; then 
        if $floating; then 
          continue
        fi
        yabai -m window $window --toggle topmost
      fi
  done
}

float_signal () {
  QUERY=$(yabai -m query --windows --window $1 | jq -re '."is-topmost",."is-floating"' )
  declare -a PROPERTIES
  PROPERTIES=("$QUERY")

  if ! ${PROPERTIES[0]} && ${PROPERTIES[1]}; then
    yabai -m window $1 --toggle topmost 
    echo 1 ${PROPERTIES[0]} ${PROPERTIES[1]}
  fi

  if ${PROPERTIES[0]} && ! ${PROPERTIES[1]}; then
    yabai -m window $1 --toggle topmost 
    echo 2 ${PROPERTIES[0]} ${PROPERTIES[1]}
  fi



}

set_layer () {
  QUERY=$(yabai -m query --windows --window $1 | jq -re '."is-topmost",."is-floating"' )
  declare -a PROPERTIES
  PROPERTIES=("$QUERY")

  if ! ${PROPERTIES[1]}; then 
    yabai -m window $YABAI_WINDOW_ID --layer below
    return
  fi 

    # yabai -m window $YABAI_WINDOW_ID --layer normal



}
