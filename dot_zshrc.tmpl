#! /usr/bin/env zsh
# Z S H R C 

# O P T S
setopt AUTO_CD

# V I M  B I N D I N G S  O F F
bindkey -e  

# H I S T O R Y
HISTFILE="$HOME/.zsh_history"
HISTSIZE=500000
SAVEHIST=500000
setopt APPEND_HISTORY
setopt HIST_IGNORE_SPACE
setopt SHARE_HISTORY
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_REDUCE_BLANKS
bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

[ -f ~/.fzf.zsh ] && . ~/.fzf.zsh

# P A T H S
## B R E W 
{{ if eq .chezmoi.os "linux" }}
if [[ -d /home/linuxbrew ]]; then 
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi 
{{ end }}
{{ if eq .chezmoi.os "darwin" }}
if [[ -d /opt/homebrew ]]; then 
    path=("/opt/homebrew/sbin" $path)
    path=("/opt/homebrew/bin" $path)
fi 
{{ end }}

## User Binaries
if [[ -d "$HOME/.config/bin" ]]; then 
    path=("$HOME/.config/bin" $path)
fi 
if [[ -d "$HOME/.local/bin" ]]; then 
    path=("$HOME/.config/bin" $path)
fi 
export path

if [[ -f "$HOME/.asdf/asdf.sh" ]]; then
    # Must be sourced after exporting path
    . "$HOME/.asdf/asdf.sh"
fi 

# C O M P L E T I O N S
if command -v brew &>/dev/null; then
    fpath=("$(brew --prefix)/share/zsh/site-functions" $fpath)
fi

## Add Completion Paths
fpath=("$HOME/.config/zsh/completions/zsh-completions/src" $fpath)
fpath=("$HOME/.config/zsh/completions/chezmoi" $fpath)
## ASDF
if [[ -f $HOME/.asdf/asdf.sh ]]; then
    fpath=(${ASDF_DIR}/completions $fpath)
fi

## Init Completions
autoload -Uz compinit
compinit

# P L U G I N S
# TODO: Look in to configurations especially autosuggestions
ZSH_PLUGINS_DIR="$HOME/.config/zsh/plugins"
. "$ZSH_PLUGINS_DIR/fzf-tab/fzf-tab.plugin.zsh" # First
. "$ZSH_PLUGINS_DIR/history/history.zsh"
. "$ZSH_PLUGINS_DIR/auto-suggestions/zsh-autosuggestions.plugin.zsh"
. "$ZSH_PLUGINS_DIR/zfm/zfm.plugin.zsh"
. "$ZSH_PLUGINS_DIR/fzf/completions.zsh"
. "$ZSH_PLUGINS_DIR/fzf/key-bindings.zsh"
. "$ZSH_PLUGINS_DIR/sudo/sudo.zsh"
. "$ZSH_PLUGINS_DIR/auto-pair/zsh-autopair.plugin.zsh"
. "$ZSH_PLUGINS_DIR/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
[[ -f "$HOME/.ssh/config" ]] && . "$ZSH_PLUGINS_DIR/ssh/zsh-ssh.zsh"

## Change/Turn of Paste Highlighting
# zle_highlight=('paste:fg=black,bg=blue,underline')
zle_highlight=(paste:none)

# F Z F 
## Fzf Tab Conf
### disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
### set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
### set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
### switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'

{{ if eq .gui "true" }}
# T E R M  P R O G R A M
if [[ -z "$TERM_PROGRAM" ]]; then
    [[ ! -z "$KITTY_PID" ]] && export TERM_PROGRAM='kitty'
fi
{{ end }}

# A L I A S E S 
{{ if eq .chezmoi.os "linux" }}
{{ if eq .chezmoi.osRelease.id "fedora" }}
alias dnf="sudo dnf --config $HOME/.config/dnf/dnf.conf"
{{ end }}
{{ end }}
if command -v docker &>/dev/null; then 
    alias docker="sudo docker"
    alias docker-compose="sudo docker-compose"
fi

## SSH
alias ssh="ssh -o 'SetEnv SSH_HOST_OS=$(uname -s) TERM_PROGRAM=$TERM_PROGRAM'"

## Rsync
alias rsync="rsync -avPz --human-readable --info=name0 -e 'ssh -To RemoteCommand=none'"

## Timg
# TODO: Should be a case statement with wezterm and iterm 
if command -v timg &>/dev/null; then
    if [[ $TERM_PROGRAM == "kitty" ]]; then 
        alias timg="timg -p kitty"
    fi 
fi

## Editor 
if command -v lvim; then
    export EDITOR=$(which lvim)
else 
    export EDITOR=$(which nvim)
fi 

{{ if eq .chezmoi.os "darwin" }}
if ! command -v sudoedit &>/dev/null; then 
    ln -s "$(which sudo)" "$HOME/.config/bin/sudoedit"
fi
{{ end }}

sudo_editor() {
    if [[ -n "${@}" ]]; then
        for ARG in "${@}"; do 
            if [[ -f $ARG && ! -O "$ARG" ]]; then 
                echo $ARG
                sudoedit "${@}" 
                return 0
            fi 
        done 
    fi
      $EDITOR "${@}"
}
alias nvim=sudo_editor


## Check if Trash Exists
if command -v trash &>/dev/null; then
    [[ ! -d "$HOME/.Trash" ]] && mkdir "$HOME/.Trash"
    {{ if eq .chezmoi.os "darwin" }}
    [[ $(uname -s) = "Darwin" ]] && alias rm="$(which trash)"
    {{ end }}
    {{ if eq .chezmoi.os "linux" }}
    [[ $(uname -s) = "Linux" ]] && alias rm="$(which trash) --trash-dir=$HOME/.Trash" 
    {{ end }}
else
  echo Install Trash
fi 

## EXA
if command -v exa &>/dev/null; then 
    ## preview directory's content with exa when completing cd
    zstyle ':fzf-tab:complete:cd:*' fzf-preview 'EXA_ICON_SPACING=2 exa -1 --color=always --group-directories-first --icons $realpath'
    alias ls="EXA_ICON_SPACING=2 exa -1 --color=always --icons -a -G --group-directories-first"
    # A U T O L S
    auto-ls() {
      EXA_ICON_SPACING=2 exa -1 --color=always --icons -a -G --group-directories-first --git
    }
    chpwd_functions=(auto-ls $chpwd_functions)
else
    echo Install Exa 
fi

## Z F M
if [[ ! -d $HOME/.config/zfm ]]; then 
    mkdir -p $HOME/.config/zfm
    touch $HOME/.config/zfm/zfm
fi
export ZFM_BOOKMARKS_FILE="$HOME/.config/zfm/zfm"
alias em='nvim $(zfm select --files --multi)'

# C A S E  I N S E N S I T I V E  S U G G E S T I O N S
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# S T A R S H I P
## Init Starship
if [[ -f "$HOME/.config/starship/starship.toml" ]]; then
    eval "$(starship init zsh)"
    ## Prefer Config in it's own folder
    export STARSHIP_CONFIG="$HOME/.config/starship/starship.toml"
fi 

# N A V I
if command -v navi &>/dev/null; then 
    eval "$(navi widget zsh)"
    if [[ -f $HOME/.config/navi/config.yaml ]]; then 
        export NAVI_CONFIG="$HOME/.config/navi/config.yaml"
    fi 
else
    echo Install Navi
fi

# Z L E  W I D G E T S
# NOTE: zle -N adds it to zsh as a widget so that it can be bound
# NOTE: ZLE Widget to move cursor to beginning of the buffer 
_beginning_of_buffer() {
    CURSOR=0
}
zle -N _beginning_of_buffer

_end_of_buffer() {
    CURSOR="${#BUFFER}"
}
zle -N _end_of_buffer

_copy_buffer() {
    echo $BUFFER | pbcopy
}
zle -N _copy_buffer

_turn_off_syntax_highlighting() {
    ZSH_HIGHLIGHT_MAXLENGTH=0
    region_highlight=()
}
zle -N _turn_off_syntax_highlighting

# FIXME: NO LONGER USING ANTIBODY
_turn_on_syntax_highlighting() {
    antibody bundle zdharma-continuum/fast-syntax-highlighting
}
zle -N _turn_on_syntax_highlighting

_open_editor() {
    $EDITOR +TreeToggle
}
zle -N _open_editor

# B I N D I N G S
## up 
bindkey '\e[A' history-beginning-search-backward
## down
bindkey '\e[B' history-beginning-search-forward
## alt-right
bindkey ";3C" forward-word
## alt-left
bindkey ";3D" backward-word
## alt-backspace
bindkey ";^?" backward-delete-word

# if [[ "$TERM_PROGRAM" = "kitty" ]]; then 
# NOTE: Requires Terminal App Mappings eg: kitty.conf
## cmd+up
bindkey "☔︎" _beginning_of_buffer
## cmd+down
bindkey "☂︎" _end_of_buffer
## cmd-left
bindkey "☀︎" beginning-of-line
## cmd-right
bindkey "☼" end-of-line
## cmd-backspace
bindkey "☽" backward-kill-line
## cmd-z
bindkey "☾" undo
## cmd+shift-z
bindkey "☁︎" redo
## cmd+shift-c 
bindkey "☃︎" _copy_buffer
## cmd-|
bindkey "2;9u" _turn_off_syntax_highlighting 
## cmd+shift-|
bindkey "2;10u" _turn_on_syntax_highlighting 
## cmd+shift+space 
bindkey ";10u" _open_editor
# fi

# L O A D  A D D I T I O N A L  Z S H  C O N F I G S  
if [ -d $HOME/.config/zsh ]; then
    for file in $HOME/.config/zsh/*; do 
        source "$file"
    done
fi

{{ if eq .packer "true" }}
export PACKER="true"
{{ end }}